{
  "version": 3,
  "sources": ["../../urlpattern-polyfill/dist/urlpattern.js", "../../urlpattern-polyfill/index.js"],
  "sourcesContent": ["// src/path-to-regex-modified.ts\nvar regexIdentifierStart = /[$_\\p{ID_Start}]/u;\nvar regexIdentifierPart = /[$_\\u200C\\u200D\\p{ID_Continue}]/u;\nfunction isASCII(str, extended) {\n  return (extended ? /^[\\x00-\\xFF]*$/ : /^[\\x00-\\x7F]*$/).test(str);\n}\nfunction lexer(str, lenient = false) {\n  const tokens = [];\n  let i = 0;\n  while (i < str.length) {\n    const char = str[i];\n    const ErrorOrInvalid = function(msg) {\n      if (!lenient)\n        throw new TypeError(msg);\n      tokens.push({ type: \"INVALID_CHAR\", index: i, value: str[i++] });\n    };\n    if (char === \"*\") {\n      tokens.push({ type: \"ASTERISK\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n      while (j < str.length) {\n        const code = str.substr(j, 1);\n        if (j === i + 1 && regexIdentifierStart.test(code) || j !== i + 1 && regexIdentifierPart.test(code)) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name) {\n        ErrorOrInvalid(`Missing parameter name at ${i}`);\n        continue;\n      }\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n      let error = false;\n      if (str[j] === \"?\") {\n        ErrorOrInvalid(`Pattern cannot start with \"?\" at ${j}`);\n        continue;\n      }\n      while (j < str.length) {\n        if (!isASCII(str[j], false)) {\n          ErrorOrInvalid(`Invalid character '${str[j]}' at ${j}.`);\n          error = true;\n          break;\n        }\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            ErrorOrInvalid(`Capturing groups are not allowed at ${j}`);\n            error = true;\n            break;\n          }\n        }\n        pattern += str[j++];\n      }\n      if (error) {\n        continue;\n      }\n      if (count) {\n        ErrorOrInvalid(`Unbalanced pattern at ${i}`);\n        continue;\n      }\n      if (!pattern) {\n        ErrorOrInvalid(`Missing pattern at ${i}`);\n        continue;\n      }\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n  return tokens;\n}\nfunction parse(str, options = {}) {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter === void 0 ? \"/#?\" : options.delimiter)}]+?`;\n  const result = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n  let nameSet = /* @__PURE__ */ new Set();\n  const tryConsume = (type) => {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  const tryConsumeModifier = () => {\n    const r = tryConsume(\"MODIFIER\");\n    if (r) {\n      return r;\n    }\n    return tryConsume(\"ASTERISK\");\n  };\n  const mustConsume = (type) => {\n    const value = tryConsume(type);\n    if (value !== void 0)\n      return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n  const consumeText = () => {\n    let result2 = \"\";\n    let value;\n    while (value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value;\n    }\n    return result2;\n  };\n  const DefaultEncodePart = (value) => {\n    return value;\n  };\n  const encodePart = options.encodePart || DefaultEncodePart;\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    let pattern = tryConsume(\"PATTERN\");\n    if (!name && !pattern && tryConsume(\"ASTERISK\")) {\n      pattern = \".*\";\n    }\n    if (name || pattern) {\n      let prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(encodePart(path));\n        path = \"\";\n      }\n      const finalName = name || key++;\n      if (nameSet.has(finalName)) {\n        throw new TypeError(`Duplicate name '${finalName}'.`);\n      }\n      nameSet.add(finalName);\n      result.push({\n        name: finalName,\n        prefix: encodePart(prefix),\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsumeModifier() || \"\"\n      });\n      continue;\n    }\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name2 = tryConsume(\"NAME\") || \"\";\n      let pattern2 = tryConsume(\"PATTERN\") || \"\";\n      if (!name2 && !pattern2 && tryConsume(\"ASTERISK\")) {\n        pattern2 = \".*\";\n      }\n      const suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      const modifier = tryConsumeModifier() || \"\";\n      if (!name2 && !pattern2 && !modifier) {\n        path += prefix;\n        continue;\n      }\n      if (!name2 && !pattern2 && !prefix) {\n        continue;\n      }\n      if (path) {\n        result.push(encodePart(path));\n        path = \"\";\n      }\n      result.push({\n        name: name2 || (pattern2 ? key++ : \"\"),\n        pattern: name2 && !pattern2 ? defaultPattern : pattern2,\n        prefix: encodePart(prefix),\n        suffix: encodePart(suffix),\n        modifier\n      });\n      continue;\n    }\n    if (path) {\n      result.push(encodePart(path));\n      path = \"\";\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?^${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.ignoreCase ? \"ui\" : \"u\";\n}\nfunction regexpToRegexp(path, keys) {\n  if (!keys)\n    return path;\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\nfunction arrayToRegexp(paths, keys, options) {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options = {}) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x) => x\n  } = options;\n  const endsWith = `[${escapeString(options.endsWith === void 0 ? \"\" : options.endsWith)}]|$`;\n  const delimiter = `[${escapeString(options.delimiter === void 0 ? \"/#?\" : options.delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys)\n          keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += `((?:${token.pattern})${token.modifier})`;\n          } else {\n            route += `(${token.pattern})${token.modifier}`;\n          }\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n  if (end) {\n    if (!strict)\n      route += `${delimiter}?`;\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited = typeof endToken === \"string\" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp)\n    return regexpToRegexp(path, keys);\n  if (Array.isArray(path))\n    return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n\n// src/url-utils.ts\nvar DEFAULT_OPTIONS = {\n  delimiter: \"\",\n  prefixes: \"\",\n  sensitive: true,\n  strict: true\n};\nvar HOSTNAME_OPTIONS = {\n  delimiter: \".\",\n  prefixes: \"\",\n  sensitive: true,\n  strict: true\n};\nvar PATHNAME_OPTIONS = {\n  delimiter: \"/\",\n  prefixes: \"/\",\n  sensitive: true,\n  strict: true\n};\nfunction isAbsolutePathname(pathname, isPattern) {\n  if (!pathname.length) {\n    return false;\n  }\n  if (pathname[0] === \"/\") {\n    return true;\n  }\n  if (!isPattern) {\n    return false;\n  }\n  if (pathname.length < 2) {\n    return false;\n  }\n  if ((pathname[0] == \"\\\\\" || pathname[0] == \"{\") && pathname[1] == \"/\") {\n    return true;\n  }\n  return false;\n}\nfunction maybeStripPrefix(value, prefix) {\n  if (value.startsWith(prefix)) {\n    return value.substring(prefix.length, value.length);\n  }\n  return value;\n}\nfunction maybeStripSuffix(value, suffix) {\n  if (value.endsWith(suffix)) {\n    return value.substr(0, value.length - suffix.length);\n  }\n  return value;\n}\nfunction treatAsIPv6Hostname(value) {\n  if (!value || value.length < 2) {\n    return false;\n  }\n  if (value[0] === \"[\") {\n    return true;\n  }\n  if ((value[0] === \"\\\\\" || value[0] === \"{\") && value[1] === \"[\") {\n    return true;\n  }\n  return false;\n}\nvar SPECIAL_SCHEMES = [\n  \"ftp\",\n  \"file\",\n  \"http\",\n  \"https\",\n  \"ws\",\n  \"wss\"\n];\nfunction isSpecialScheme(protocol_regexp) {\n  if (!protocol_regexp) {\n    return true;\n  }\n  for (const scheme of SPECIAL_SCHEMES) {\n    if (protocol_regexp.test(scheme)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction canonicalizeHash(hash, isPattern) {\n  hash = maybeStripPrefix(hash, \"#\");\n  if (isPattern || hash === \"\") {\n    return hash;\n  }\n  const url = new URL(\"https://example.com\");\n  url.hash = hash;\n  return url.hash ? url.hash.substring(1, url.hash.length) : \"\";\n}\nfunction canonicalizeSearch(search, isPattern) {\n  search = maybeStripPrefix(search, \"?\");\n  if (isPattern || search === \"\") {\n    return search;\n  }\n  const url = new URL(\"https://example.com\");\n  url.search = search;\n  return url.search ? url.search.substring(1, url.search.length) : \"\";\n}\nfunction canonicalizeHostname(hostname, isPattern) {\n  if (isPattern || hostname === \"\") {\n    return hostname;\n  }\n  if (treatAsIPv6Hostname(hostname)) {\n    return ipv6HostnameEncodeCallback(hostname);\n  } else {\n    return hostnameEncodeCallback(hostname);\n  }\n}\nfunction canonicalizePassword(password, isPattern) {\n  if (isPattern || password === \"\") {\n    return password;\n  }\n  const url = new URL(\"https://example.com\");\n  url.password = password;\n  return url.password;\n}\nfunction canonicalizeUsername(username, isPattern) {\n  if (isPattern || username === \"\") {\n    return username;\n  }\n  const url = new URL(\"https://example.com\");\n  url.username = username;\n  return url.username;\n}\nfunction canonicalizePathname(pathname, protocol, isPattern) {\n  if (isPattern || pathname === \"\") {\n    return pathname;\n  }\n  if (protocol && !SPECIAL_SCHEMES.includes(protocol)) {\n    const url = new URL(`${protocol}:${pathname}`);\n    return url.pathname;\n  }\n  const leadingSlash = pathname[0] == \"/\";\n  pathname = new URL(\n    !leadingSlash ? \"/-\" + pathname : pathname,\n    \"https://example.com\"\n  ).pathname;\n  if (!leadingSlash) {\n    pathname = pathname.substring(2, pathname.length);\n  }\n  return pathname;\n}\nfunction canonicalizePort(port, protocol, isPattern) {\n  if (defaultPortForProtocol(protocol) === port) {\n    port = \"\";\n  }\n  if (isPattern || port === \"\") {\n    return port;\n  }\n  return portEncodeCallback(port);\n}\nfunction canonicalizeProtocol(protocol, isPattern) {\n  protocol = maybeStripSuffix(protocol, \":\");\n  if (isPattern || protocol === \"\") {\n    return protocol;\n  }\n  return protocolEncodeCallback(protocol);\n}\nfunction defaultPortForProtocol(protocol) {\n  switch (protocol) {\n    case \"ws\":\n    case \"http\":\n      return \"80\";\n    case \"wws\":\n    case \"https\":\n      return \"443\";\n    case \"ftp\":\n      return \"21\";\n    default:\n      return \"\";\n  }\n}\nfunction protocolEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/^[-+.A-Za-z0-9]*$/.test(input))\n    return input.toLowerCase();\n  throw new TypeError(`Invalid protocol '${input}'.`);\n}\nfunction usernameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.username = input;\n  return url.username;\n}\nfunction passwordEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.password = input;\n  return url.password;\n}\nfunction hostnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/[\\t\\n\\r #%/:<>?@[\\]^\\\\|]/g.test(input)) {\n    throw new TypeError(`Invalid hostname '${input}'`);\n  }\n  const url = new URL(\"https://example.com\");\n  url.hostname = input;\n  return url.hostname;\n}\nfunction ipv6HostnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/[^0-9a-fA-F[\\]:]/g.test(input)) {\n    throw new TypeError(`Invalid IPv6 hostname '${input}'`);\n  }\n  return input.toLowerCase();\n}\nfunction portEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  if (/^[0-9]*$/.test(input) && parseInt(input) <= 65535) {\n    return input;\n  }\n  throw new TypeError(`Invalid port '${input}'.`);\n}\nfunction standardURLPathnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.pathname = input[0] !== \"/\" ? \"/-\" + input : input;\n  if (input[0] !== \"/\") {\n    return url.pathname.substring(2, url.pathname.length);\n  }\n  return url.pathname;\n}\nfunction pathURLPathnameEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(`data:${input}`);\n  return url.pathname;\n}\nfunction searchEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.search = input;\n  return url.search.substring(1, url.search.length);\n}\nfunction hashEncodeCallback(input) {\n  if (input === \"\") {\n    return input;\n  }\n  const url = new URL(\"https://example.com\");\n  url.hash = input;\n  return url.hash.substring(1, url.hash.length);\n}\n\n// src/url-pattern-parser.ts\nvar Parser = class {\n  constructor(input) {\n    this.tokenList = [];\n    this.internalResult = {};\n    this.tokenIndex = 0;\n    this.tokenIncrement = 1;\n    this.componentStart = 0;\n    this.state = 0 /* INIT */;\n    this.groupDepth = 0;\n    this.hostnameIPv6BracketDepth = 0;\n    this.shouldTreatAsStandardURL = false;\n    this.input = input;\n  }\n  get result() {\n    return this.internalResult;\n  }\n  parse() {\n    this.tokenList = lexer(this.input, true);\n    for (; this.tokenIndex < this.tokenList.length; this.tokenIndex += this.tokenIncrement) {\n      this.tokenIncrement = 1;\n      if (this.tokenList[this.tokenIndex].type === \"END\") {\n        if (this.state === 0 /* INIT */) {\n          this.rewind();\n          if (this.isHashPrefix()) {\n            this.changeState(9 /* HASH */, 1);\n          } else if (this.isSearchPrefix()) {\n            this.changeState(8 /* SEARCH */, 1);\n            this.internalResult.hash = \"\";\n          } else {\n            this.changeState(7 /* PATHNAME */, 0);\n            this.internalResult.search = \"\";\n            this.internalResult.hash = \"\";\n          }\n          continue;\n        } else if (this.state === 2 /* AUTHORITY */) {\n          this.rewindAndSetState(5 /* HOSTNAME */);\n          continue;\n        }\n        this.changeState(10 /* DONE */, 0);\n        break;\n      }\n      if (this.groupDepth > 0) {\n        if (this.isGroupClose()) {\n          this.groupDepth -= 1;\n        } else {\n          continue;\n        }\n      }\n      if (this.isGroupOpen()) {\n        this.groupDepth += 1;\n        continue;\n      }\n      switch (this.state) {\n        case 0 /* INIT */:\n          if (this.isProtocolSuffix()) {\n            this.internalResult.username = \"\";\n            this.internalResult.password = \"\";\n            this.internalResult.hostname = \"\";\n            this.internalResult.port = \"\";\n            this.internalResult.pathname = \"\";\n            this.internalResult.search = \"\";\n            this.internalResult.hash = \"\";\n            this.rewindAndSetState(1 /* PROTOCOL */);\n          }\n          break;\n        case 1 /* PROTOCOL */:\n          if (this.isProtocolSuffix()) {\n            this.computeShouldTreatAsStandardURL();\n            let nextState = 7 /* PATHNAME */;\n            let skip = 1;\n            if (this.shouldTreatAsStandardURL) {\n              this.internalResult.pathname = \"/\";\n            }\n            if (this.nextIsAuthoritySlashes()) {\n              nextState = 2 /* AUTHORITY */;\n              skip = 3;\n            } else if (this.shouldTreatAsStandardURL) {\n              nextState = 2 /* AUTHORITY */;\n            }\n            this.changeState(nextState, skip);\n          }\n          break;\n        case 2 /* AUTHORITY */:\n          if (this.isIdentityTerminator()) {\n            this.rewindAndSetState(3 /* USERNAME */);\n          } else if (this.isPathnameStart() || this.isSearchPrefix() || this.isHashPrefix()) {\n            this.rewindAndSetState(5 /* HOSTNAME */);\n          }\n          break;\n        case 3 /* USERNAME */:\n          if (this.isPasswordPrefix()) {\n            this.changeState(4 /* PASSWORD */, 1);\n          } else if (this.isIdentityTerminator()) {\n            this.changeState(5 /* HOSTNAME */, 1);\n          }\n          break;\n        case 4 /* PASSWORD */:\n          if (this.isIdentityTerminator()) {\n            this.changeState(5 /* HOSTNAME */, 1);\n          }\n          break;\n        case 5 /* HOSTNAME */:\n          if (this.isIPv6Open()) {\n            this.hostnameIPv6BracketDepth += 1;\n          } else if (this.isIPv6Close()) {\n            this.hostnameIPv6BracketDepth -= 1;\n          }\n          if (this.isPortPrefix() && !this.hostnameIPv6BracketDepth) {\n            this.changeState(6 /* PORT */, 1);\n          } else if (this.isPathnameStart()) {\n            this.changeState(7 /* PATHNAME */, 0);\n          } else if (this.isSearchPrefix()) {\n            this.changeState(8 /* SEARCH */, 1);\n          } else if (this.isHashPrefix()) {\n            this.changeState(9 /* HASH */, 1);\n          }\n          break;\n        case 6 /* PORT */:\n          if (this.isPathnameStart()) {\n            this.changeState(7 /* PATHNAME */, 0);\n          } else if (this.isSearchPrefix()) {\n            this.changeState(8 /* SEARCH */, 1);\n          } else if (this.isHashPrefix()) {\n            this.changeState(9 /* HASH */, 1);\n          }\n          break;\n        case 7 /* PATHNAME */:\n          if (this.isSearchPrefix()) {\n            this.changeState(8 /* SEARCH */, 1);\n          } else if (this.isHashPrefix()) {\n            this.changeState(9 /* HASH */, 1);\n          }\n          break;\n        case 8 /* SEARCH */:\n          if (this.isHashPrefix()) {\n            this.changeState(9 /* HASH */, 1);\n          }\n          break;\n        case 9 /* HASH */:\n          break;\n        case 10 /* DONE */:\n          break;\n      }\n    }\n  }\n  changeState(newState, skip) {\n    switch (this.state) {\n      case 0 /* INIT */:\n        break;\n      case 1 /* PROTOCOL */:\n        this.internalResult.protocol = this.makeComponentString();\n        break;\n      case 2 /* AUTHORITY */:\n        break;\n      case 3 /* USERNAME */:\n        this.internalResult.username = this.makeComponentString();\n        break;\n      case 4 /* PASSWORD */:\n        this.internalResult.password = this.makeComponentString();\n        break;\n      case 5 /* HOSTNAME */:\n        this.internalResult.hostname = this.makeComponentString();\n        break;\n      case 6 /* PORT */:\n        this.internalResult.port = this.makeComponentString();\n        break;\n      case 7 /* PATHNAME */:\n        this.internalResult.pathname = this.makeComponentString();\n        break;\n      case 8 /* SEARCH */:\n        this.internalResult.search = this.makeComponentString();\n        break;\n      case 9 /* HASH */:\n        this.internalResult.hash = this.makeComponentString();\n        break;\n      case 10 /* DONE */:\n        break;\n    }\n    this.changeStateWithoutSettingComponent(newState, skip);\n  }\n  changeStateWithoutSettingComponent(newState, skip) {\n    this.state = newState;\n    this.componentStart = this.tokenIndex + skip;\n    this.tokenIndex += skip;\n    this.tokenIncrement = 0;\n  }\n  rewind() {\n    this.tokenIndex = this.componentStart;\n    this.tokenIncrement = 0;\n  }\n  rewindAndSetState(newState) {\n    this.rewind();\n    this.state = newState;\n  }\n  safeToken(index) {\n    if (index < 0) {\n      index = this.tokenList.length - index;\n    }\n    if (index < this.tokenList.length) {\n      return this.tokenList[index];\n    }\n    return this.tokenList[this.tokenList.length - 1];\n  }\n  isNonSpecialPatternChar(index, value) {\n    const token = this.safeToken(index);\n    return token.value === value && (token.type === \"CHAR\" || token.type === \"ESCAPED_CHAR\" || token.type === \"INVALID_CHAR\");\n  }\n  isProtocolSuffix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  nextIsAuthoritySlashes() {\n    return this.isNonSpecialPatternChar(this.tokenIndex + 1, \"/\") && this.isNonSpecialPatternChar(this.tokenIndex + 2, \"/\");\n  }\n  isIdentityTerminator() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"@\");\n  }\n  isPasswordPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  isPortPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \":\");\n  }\n  isPathnameStart() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"/\");\n  }\n  isSearchPrefix() {\n    if (this.isNonSpecialPatternChar(this.tokenIndex, \"?\")) {\n      return true;\n    }\n    if (this.tokenList[this.tokenIndex].value !== \"?\") {\n      return false;\n    }\n    const previousToken = this.safeToken(this.tokenIndex - 1);\n    return previousToken.type !== \"NAME\" && previousToken.type !== \"PATTERN\" && previousToken.type !== \"CLOSE\" && previousToken.type !== \"ASTERISK\";\n  }\n  isHashPrefix() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"#\");\n  }\n  isGroupOpen() {\n    return this.tokenList[this.tokenIndex].type == \"OPEN\";\n  }\n  isGroupClose() {\n    return this.tokenList[this.tokenIndex].type == \"CLOSE\";\n  }\n  isIPv6Open() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"[\");\n  }\n  isIPv6Close() {\n    return this.isNonSpecialPatternChar(this.tokenIndex, \"]\");\n  }\n  makeComponentString() {\n    const token = this.tokenList[this.tokenIndex];\n    const componentCharStart = this.safeToken(this.componentStart).index;\n    return this.input.substring(componentCharStart, token.index);\n  }\n  computeShouldTreatAsStandardURL() {\n    const options = {};\n    Object.assign(options, DEFAULT_OPTIONS);\n    options.encodePart = protocolEncodeCallback;\n    const regexp = pathToRegexp(this.makeComponentString(), void 0, options);\n    this.shouldTreatAsStandardURL = isSpecialScheme(regexp);\n  }\n};\n\n// src/url-pattern.ts\nvar COMPONENTS = [\n  \"protocol\",\n  \"username\",\n  \"password\",\n  \"hostname\",\n  \"port\",\n  \"pathname\",\n  \"search\",\n  \"hash\"\n];\nvar DEFAULT_PATTERN = \"*\";\nfunction extractValues(url, baseURL) {\n  if (typeof url !== \"string\") {\n    throw new TypeError(`parameter 1 is not of type 'string'.`);\n  }\n  const o = new URL(url, baseURL);\n  return {\n    protocol: o.protocol.substring(0, o.protocol.length - 1),\n    username: o.username,\n    password: o.password,\n    hostname: o.hostname,\n    port: o.port,\n    pathname: o.pathname,\n    search: o.search != \"\" ? o.search.substring(1, o.search.length) : void 0,\n    hash: o.hash != \"\" ? o.hash.substring(1, o.hash.length) : void 0\n  };\n}\nfunction processBaseURLString(input, isPattern) {\n  if (!isPattern) {\n    return input;\n  }\n  return escapePatternString(input);\n}\nfunction applyInit(o, init, isPattern) {\n  let baseURL;\n  if (typeof init.baseURL === \"string\") {\n    try {\n      baseURL = new URL(init.baseURL);\n      o.protocol = processBaseURLString(baseURL.protocol.substring(0, baseURL.protocol.length - 1), isPattern);\n      o.username = processBaseURLString(baseURL.username, isPattern);\n      o.password = processBaseURLString(baseURL.password, isPattern);\n      o.hostname = processBaseURLString(baseURL.hostname, isPattern);\n      o.port = processBaseURLString(baseURL.port, isPattern);\n      o.pathname = processBaseURLString(baseURL.pathname, isPattern);\n      o.search = processBaseURLString(baseURL.search.substring(1, baseURL.search.length), isPattern);\n      o.hash = processBaseURLString(baseURL.hash.substring(1, baseURL.hash.length), isPattern);\n    } catch {\n      throw new TypeError(`invalid baseURL '${init.baseURL}'.`);\n    }\n  }\n  if (typeof init.protocol === \"string\") {\n    o.protocol = canonicalizeProtocol(init.protocol, isPattern);\n  }\n  if (typeof init.username === \"string\") {\n    o.username = canonicalizeUsername(init.username, isPattern);\n  }\n  if (typeof init.password === \"string\") {\n    o.password = canonicalizePassword(init.password, isPattern);\n  }\n  if (typeof init.hostname === \"string\") {\n    o.hostname = canonicalizeHostname(init.hostname, isPattern);\n  }\n  if (typeof init.port === \"string\") {\n    o.port = canonicalizePort(init.port, o.protocol, isPattern);\n  }\n  if (typeof init.pathname === \"string\") {\n    o.pathname = init.pathname;\n    if (baseURL && !isAbsolutePathname(o.pathname, isPattern)) {\n      const slashIndex = baseURL.pathname.lastIndexOf(\"/\");\n      if (slashIndex >= 0) {\n        o.pathname = processBaseURLString(baseURL.pathname.substring(0, slashIndex + 1), isPattern) + o.pathname;\n      }\n    }\n    o.pathname = canonicalizePathname(o.pathname, o.protocol, isPattern);\n  }\n  if (typeof init.search === \"string\") {\n    o.search = canonicalizeSearch(init.search, isPattern);\n  }\n  if (typeof init.hash === \"string\") {\n    o.hash = canonicalizeHash(init.hash, isPattern);\n  }\n  return o;\n}\nfunction escapePatternString(value) {\n  return value.replace(/([+*?:{}()\\\\])/g, \"\\\\$1\");\n}\nfunction escapeRegexpString(value) {\n  return value.replace(/([.+*?^${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction tokensToPattern(tokens, options) {\n  const wildcardPattern = \".*\";\n  const segmentWildcardPattern = `[^${escapeRegexpString(options.delimiter === void 0 ? \"/#?\" : options.delimiter)}]+?`;\n  const regexIdentifierPart2 = /[$_\\u200C\\u200D\\p{ID_Continue}]/u;\n  let result = \"\";\n  for (let i = 0; i < tokens.length; ++i) {\n    const token = tokens[i];\n    const lastToken = i > 0 ? tokens[i - 1] : null;\n    const nextToken = i < tokens.length - 1 ? tokens[i + 1] : null;\n    if (typeof token === \"string\") {\n      result += escapePatternString(token);\n      continue;\n    }\n    if (token.pattern === \"\") {\n      if (token.modifier === \"\") {\n        result += escapePatternString(token.prefix);\n        continue;\n      }\n      result += `{${escapePatternString(token.prefix)}}${token.modifier}`;\n      continue;\n    }\n    const customName = typeof token.name !== \"number\";\n    const optionsPrefixes = options.prefixes !== void 0 ? options.prefixes : \"./\";\n    let needsGrouping = token.suffix !== \"\" || token.prefix !== \"\" && (token.prefix.length !== 1 || !optionsPrefixes.includes(token.prefix));\n    if (!needsGrouping && customName && token.pattern === segmentWildcardPattern && token.modifier === \"\" && nextToken && !nextToken.prefix && !nextToken.suffix) {\n      if (typeof nextToken === \"string\") {\n        const code = nextToken.length > 0 ? nextToken[0] : \"\";\n        needsGrouping = regexIdentifierPart2.test(code);\n      } else {\n        needsGrouping = typeof nextToken.name === \"number\";\n      }\n    }\n    if (!needsGrouping && token.prefix === \"\" && lastToken && typeof lastToken === \"string\" && lastToken.length > 0) {\n      const code = lastToken[lastToken.length - 1];\n      needsGrouping = optionsPrefixes.includes(code);\n    }\n    if (needsGrouping) {\n      result += \"{\";\n    }\n    result += escapePatternString(token.prefix);\n    if (customName) {\n      result += `:${token.name}`;\n    }\n    if (token.pattern === wildcardPattern) {\n      if (!customName && (!lastToken || typeof lastToken === \"string\" || lastToken.modifier || needsGrouping || token.prefix !== \"\")) {\n        result += \"*\";\n      } else {\n        result += `(${wildcardPattern})`;\n      }\n    } else if (token.pattern === segmentWildcardPattern) {\n      if (!customName) {\n        result += `(${segmentWildcardPattern})`;\n      }\n    } else {\n      result += `(${token.pattern})`;\n    }\n    if (token.pattern === segmentWildcardPattern && customName && token.suffix !== \"\") {\n      if (regexIdentifierPart2.test(token.suffix[0])) {\n        result += \"\\\\\";\n      }\n    }\n    result += escapePatternString(token.suffix);\n    if (needsGrouping) {\n      result += \"}\";\n    }\n    result += token.modifier;\n  }\n  return result;\n}\nvar URLPattern = class {\n  constructor(init = {}, baseURLOrOptions, options) {\n    this.regexp = {};\n    this.keys = {};\n    this.component_pattern = {};\n    try {\n      let baseURL = void 0;\n      if (typeof baseURLOrOptions === \"string\") {\n        baseURL = baseURLOrOptions;\n      } else {\n        options = baseURLOrOptions;\n      }\n      if (typeof init === \"string\") {\n        const parser = new Parser(init);\n        parser.parse();\n        init = parser.result;\n        if (baseURL === void 0 && typeof init.protocol !== \"string\") {\n          throw new TypeError(`A base URL must be provided for a relative constructor string.`);\n        }\n        init.baseURL = baseURL;\n      } else {\n        if (!init || typeof init !== \"object\") {\n          throw new TypeError(`parameter 1 is not of type 'string' and cannot convert to dictionary.`);\n        }\n        if (baseURL) {\n          throw new TypeError(`parameter 1 is not of type 'string'.`);\n        }\n      }\n      if (typeof options === \"undefined\") {\n        options = { ignoreCase: false };\n      }\n      const ignoreCaseOptions = { ignoreCase: options.ignoreCase === true };\n      const defaults = {\n        pathname: DEFAULT_PATTERN,\n        protocol: DEFAULT_PATTERN,\n        username: DEFAULT_PATTERN,\n        password: DEFAULT_PATTERN,\n        hostname: DEFAULT_PATTERN,\n        port: DEFAULT_PATTERN,\n        search: DEFAULT_PATTERN,\n        hash: DEFAULT_PATTERN\n      };\n      this.pattern = applyInit(defaults, init, true);\n      if (defaultPortForProtocol(this.pattern.protocol) === this.pattern.port) {\n        this.pattern.port = \"\";\n      }\n      let component;\n      for (component of COMPONENTS) {\n        if (!(component in this.pattern))\n          continue;\n        const options2 = {};\n        const pattern = this.pattern[component];\n        this.keys[component] = [];\n        switch (component) {\n          case \"protocol\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = protocolEncodeCallback;\n            break;\n          case \"username\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = usernameEncodeCallback;\n            break;\n          case \"password\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = passwordEncodeCallback;\n            break;\n          case \"hostname\":\n            Object.assign(options2, HOSTNAME_OPTIONS);\n            if (treatAsIPv6Hostname(pattern)) {\n              options2.encodePart = ipv6HostnameEncodeCallback;\n            } else {\n              options2.encodePart = hostnameEncodeCallback;\n            }\n            break;\n          case \"port\":\n            Object.assign(options2, DEFAULT_OPTIONS);\n            options2.encodePart = portEncodeCallback;\n            break;\n          case \"pathname\":\n            if (isSpecialScheme(this.regexp.protocol)) {\n              Object.assign(options2, PATHNAME_OPTIONS, ignoreCaseOptions);\n              options2.encodePart = standardURLPathnameEncodeCallback;\n            } else {\n              Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n              options2.encodePart = pathURLPathnameEncodeCallback;\n            }\n            break;\n          case \"search\":\n            Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n            options2.encodePart = searchEncodeCallback;\n            break;\n          case \"hash\":\n            Object.assign(options2, DEFAULT_OPTIONS, ignoreCaseOptions);\n            options2.encodePart = hashEncodeCallback;\n            break;\n        }\n        try {\n          const tokens = parse(pattern, options2);\n          this.regexp[component] = tokensToRegexp(tokens, this.keys[component], options2);\n          this.component_pattern[component] = tokensToPattern(tokens, options2);\n        } catch {\n          throw new TypeError(`invalid ${component} pattern '${this.pattern[component]}'.`);\n        }\n      }\n    } catch (err) {\n      throw new TypeError(`Failed to construct 'URLPattern': ${err.message}`);\n    }\n  }\n  test(input = {}, baseURL) {\n    let values = {\n      pathname: \"\",\n      protocol: \"\",\n      username: \"\",\n      password: \"\",\n      hostname: \"\",\n      port: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n    if (typeof input !== \"string\" && baseURL) {\n      throw new TypeError(`parameter 1 is not of type 'string'.`);\n    }\n    if (typeof input === \"undefined\") {\n      return false;\n    }\n    try {\n      if (typeof input === \"object\") {\n        values = applyInit(values, input, false);\n      } else {\n        values = applyInit(values, extractValues(input, baseURL), false);\n      }\n    } catch (err) {\n      return false;\n    }\n    let component;\n    for (component of COMPONENTS) {\n      if (!this.regexp[component].exec(values[component])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  exec(input = {}, baseURL) {\n    let values = {\n      pathname: \"\",\n      protocol: \"\",\n      username: \"\",\n      password: \"\",\n      hostname: \"\",\n      port: \"\",\n      search: \"\",\n      hash: \"\"\n    };\n    if (typeof input !== \"string\" && baseURL) {\n      throw new TypeError(`parameter 1 is not of type 'string'.`);\n    }\n    if (typeof input === \"undefined\") {\n      return;\n    }\n    try {\n      if (typeof input === \"object\") {\n        values = applyInit(values, input, false);\n      } else {\n        values = applyInit(values, extractValues(input, baseURL), false);\n      }\n    } catch (err) {\n      return null;\n    }\n    let result = {};\n    if (baseURL) {\n      result.inputs = [input, baseURL];\n    } else {\n      result.inputs = [input];\n    }\n    let component;\n    for (component of COMPONENTS) {\n      let match = this.regexp[component].exec(values[component]);\n      if (!match) {\n        return null;\n      }\n      let groups = {};\n      for (let [i, key] of this.keys[component].entries()) {\n        if (typeof key.name === \"string\" || typeof key.name === \"number\") {\n          let value = match[i + 1];\n          groups[key.name] = value;\n        }\n      }\n      result[component] = {\n        input: values[component] || \"\",\n        groups\n      };\n    }\n    return result;\n  }\n  get protocol() {\n    return this.component_pattern.protocol;\n  }\n  get username() {\n    return this.component_pattern.username;\n  }\n  get password() {\n    return this.component_pattern.password;\n  }\n  get hostname() {\n    return this.component_pattern.hostname;\n  }\n  get port() {\n    return this.component_pattern.port;\n  }\n  get pathname() {\n    return this.component_pattern.pathname;\n  }\n  get search() {\n    return this.component_pattern.search;\n  }\n  get hash() {\n    return this.component_pattern.hash;\n  }\n};\nexport {\n  URLPattern\n};\n", "import { URLPattern } from \"./dist/urlpattern.js\";\n\nexport { URLPattern };\n\nif (!globalThis.URLPattern) {\n  globalThis.URLPattern = URLPattern;\n}\n"],
  "mappings": "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",
  "names": []
}
